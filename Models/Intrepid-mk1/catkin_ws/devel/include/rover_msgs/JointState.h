// Generated by gencpp from file rover_msgs/JointState.msg
// DO NOT EDIT!


#ifndef ROVER_MSGS_MESSAGE_JOINTSTATE_H
#define ROVER_MSGS_MESSAGE_JOINTSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rover_msgs
{
template <class ContainerAllocator>
struct JointState_
{
  typedef JointState_<ContainerAllocator> Type;

  JointState_()
    : name()
    , parentName()
    , idx(0)
    , position(0.0)
    , torque(0.0)  {
    }
  JointState_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , parentName(_alloc)
    , idx(0)
    , position(0.0)
    , torque(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _parentName_type;
  _parentName_type parentName;

   typedef int8_t _idx_type;
  _idx_type idx;

   typedef float _position_type;
  _position_type position;

   typedef float _torque_type;
  _torque_type torque;





  typedef boost::shared_ptr< ::rover_msgs::JointState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rover_msgs::JointState_<ContainerAllocator> const> ConstPtr;

}; // struct JointState_

typedef ::rover_msgs::JointState_<std::allocator<void> > JointState;

typedef boost::shared_ptr< ::rover_msgs::JointState > JointStatePtr;
typedef boost::shared_ptr< ::rover_msgs::JointState const> JointStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rover_msgs::JointState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rover_msgs::JointState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rover_msgs::JointState_<ContainerAllocator1> & lhs, const ::rover_msgs::JointState_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.parentName == rhs.parentName &&
    lhs.idx == rhs.idx &&
    lhs.position == rhs.position &&
    lhs.torque == rhs.torque;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rover_msgs::JointState_<ContainerAllocator1> & lhs, const ::rover_msgs::JointState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rover_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rover_msgs::JointState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rover_msgs::JointState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rover_msgs::JointState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rover_msgs::JointState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rover_msgs::JointState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rover_msgs::JointState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rover_msgs::JointState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e5052bf8979554b0657f495e0fbf5ca4";
  }

  static const char* value(const ::rover_msgs::JointState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe5052bf8979554b0ULL;
  static const uint64_t static_value2 = 0x657f495e0fbf5ca4ULL;
};

template<class ContainerAllocator>
struct DataType< ::rover_msgs::JointState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rover_msgs/JointState";
  }

  static const char* value(const ::rover_msgs::JointState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rover_msgs::JointState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"string parentName\n"
"int8 idx\n"
"float32 position\n"
"float32 torque\n"
;
  }

  static const char* value(const ::rover_msgs::JointState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rover_msgs::JointState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.parentName);
      stream.next(m.idx);
      stream.next(m.position);
      stream.next(m.torque);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rover_msgs::JointState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rover_msgs::JointState_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "parentName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.parentName);
    s << indent << "idx: ";
    Printer<int8_t>::stream(s, indent + "  ", v.idx);
    s << indent << "position: ";
    Printer<float>::stream(s, indent + "  ", v.position);
    s << indent << "torque: ";
    Printer<float>::stream(s, indent + "  ", v.torque);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROVER_MSGS_MESSAGE_JOINTSTATE_H
