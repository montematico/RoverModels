// Generated by gencpp from file rover_msgs/ArmControlResponse.msg
// DO NOT EDIT!


#ifndef ROVER_MSGS_MESSAGE_ARMCONTROLRESPONSE_H
#define ROVER_MSGS_MESSAGE_ARMCONTROLRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rover_msgs
{
template <class ContainerAllocator>
struct ArmControlResponse_
{
  typedef ArmControlResponse_<ContainerAllocator> Type;

  ArmControlResponse_()
    : test1(false)  {
    }
  ArmControlResponse_(const ContainerAllocator& _alloc)
    : test1(false)  {
  (void)_alloc;
    }



   typedef uint8_t _test1_type;
  _test1_type test1;





  typedef boost::shared_ptr< ::rover_msgs::ArmControlResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rover_msgs::ArmControlResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ArmControlResponse_

typedef ::rover_msgs::ArmControlResponse_<std::allocator<void> > ArmControlResponse;

typedef boost::shared_ptr< ::rover_msgs::ArmControlResponse > ArmControlResponsePtr;
typedef boost::shared_ptr< ::rover_msgs::ArmControlResponse const> ArmControlResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rover_msgs::ArmControlResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rover_msgs::ArmControlResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rover_msgs::ArmControlResponse_<ContainerAllocator1> & lhs, const ::rover_msgs::ArmControlResponse_<ContainerAllocator2> & rhs)
{
  return lhs.test1 == rhs.test1;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rover_msgs::ArmControlResponse_<ContainerAllocator1> & lhs, const ::rover_msgs::ArmControlResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rover_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rover_msgs::ArmControlResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rover_msgs::ArmControlResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rover_msgs::ArmControlResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rover_msgs::ArmControlResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rover_msgs::ArmControlResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rover_msgs::ArmControlResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rover_msgs::ArmControlResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "409c04b93fd34a3758e2f0f86aa57c1a";
  }

  static const char* value(const ::rover_msgs::ArmControlResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x409c04b93fd34a37ULL;
  static const uint64_t static_value2 = 0x58e2f0f86aa57c1aULL;
};

template<class ContainerAllocator>
struct DataType< ::rover_msgs::ArmControlResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rover_msgs/ArmControlResponse";
  }

  static const char* value(const ::rover_msgs::ArmControlResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rover_msgs::ArmControlResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool test1\n"
;
  }

  static const char* value(const ::rover_msgs::ArmControlResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rover_msgs::ArmControlResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.test1);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ArmControlResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rover_msgs::ArmControlResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rover_msgs::ArmControlResponse_<ContainerAllocator>& v)
  {
    s << indent << "test1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.test1);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROVER_MSGS_MESSAGE_ARMCONTROLRESPONSE_H
